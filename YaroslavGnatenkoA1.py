from operator import itemgetterdef main():    """    Student name - Yaroslav Gnatenko, student ID - 13223976. Date: 1st September 2017      this program has two list to store the data. it will load the data     from books.csv into list_requried. user will choose to view/add/mark those books are loaded in the requried_list.     user can mark the book, the program will put the item that user choose into list_read, and remove the book     from list_required. When user choose quit, the program will display data from list_completed into books.csv and     show how many books use transferred.     https://github.com/YarikGn/YaroslavGnReadinglist01     """    list_required = []          # declare two list for storing all books    list_completed = []    list_required = load_books(list_required)       # load books from books.csv    user_name = input("Hello friend, please enter your name: ")        # print(list_required)    print("{}, Welcome ".format(user_name))    corrected_books = find_valid_books()            # get the correct books    while corrected_books != "Q":            # user select quite, otherwise call different function according to books        if corrected_books == "R":            view_required_items(list_required)        elif corrected_books == "C":            view_completed_books(list_completed)        elif corrected_books == "A":            list_required = add_books(list_required)        elif corrected_books == "M":            backBooks = mark_books(list_required)            list_required.remove(backBooks)          # delete the object            list_completed.append(backBooks)             # put the marked item into list_completed        corrected_order = find_valid_Books()    books_save(list_completed)          # to store books into books.csv    print(" Have a nice day :)")def load_books(list_required):         # this function reads the data from csv file, then add into the required list    file_reader = open("items.csv", "r");    for every_line in file_reader:          # read every line        each_books = every_line.split(",")           # split data, then store to the dictionary        required_item = {"Title": each_item[0], "Author": float(each_item[1]), "Pages": int(each_item[2])}        list_required.append(required_books)    file_reader.close()    return list_requireddef books_save(list_completed):         # to store the data from the list_completed    file_writer = open("books.csv", "w")         # to open file and write    for each_book in list_completed:        file_writer.write("{},{},{},c\n".format(each_book["Title"], each_book["Author"], each_book["Price"]))    file_writer.close()    print("{} items saved to books.csv".format(len(list_completed)))def find_valid_books():         # this function is to find the valid books is valid or not    user_books = input("Menu:\nR - List required books\nC - List completed items\nA - Add new item\n" +          "M - Mark a book as completed\nQ - Quit\n>>>").upper()           # user enter lower/upper, it must transfer to upper    order_list = ["R", "C", "A", "M", "Q"]          # list for storing the books    while user_books not in order_list:         # let user enter the order until it is correct        print("Invalid menu choice",end ='\n')        user_order = input("Menu:\nR - List required books\nC - List completed books\nA - Add new books\n" +                           "M - Mark books as completed\nQ - Quit\n>>>").upper()    return user_orderdef view_required_books(list_required):    """       this function shows the required list of books    def view_required_books(list_required):        declare number as an integer        declare display_info as a string        declare total_price as an integer        if len(list_required) == 0:           display "No required items"    """    number = 0  # number the order    display_info = "Required books:\n"  # to store the list    total_price = 0         # to calculate total price    if len(list_required) == 0:        print("No required books")    else:        list_required = sorted(list_required, key=bookgetter('Price'))       # sorting list according price        for each_books in list_required:         # loop for listed every book in the list            display_info += "{0:}. {1:21}$ {2:.2f} ({3})\n".format(number, each_book["Title"], each_book["Author"],                                                           each_book["Price"])            number += 1            total_price += each_item["Price"]       # to add price        print(display_info + "Total price for {} book: $ {}".format(number, total_price))    return list_requireddef view_completed_items(list_completed):    """       this function is for showing the list of completed books    pseudcode: same as given in "def view_required_books(list_required)"    """ number = 0    display_info = "Completed books:\n"         # to display completed list    if len(list_completed) == 0:        print("No books completed")def add_book(list_required):    """       this function for adding new books. user have to enter Title, author and price of a book.       """    boolean_price = True  # boolean variable to run while loop for price    product_author =input("book Author: ").capitalize() #  check the user weather enter valid name is blank or not    product_title = input("book Title: ").capitalize()        #  check the user weather enter valid name is blank or not    product_name = product_name.strip()    while not product_name:     # if not, let user enter correct value        print("Input should not be blank")        product_name = input("Book name:").capitalize()        product_name = product_name.strip()    product_price = 0       # get the price and until user enter a valid price    while boolean_price:        try:            product_price = float(input("Price: $"))            if product_price < 0:       # if loop to check                print("Price must be >= $0")            else:                boolean_price = False  # after valid value, quit loop        except ValueError:            print("Invalid input; please enter a valid number")    product_priority = 0        # get priority from user    while boolean_priority:        try:            product_priority = int(input("Priority: "))            if product_priority < 0 or product_priority > 3:        # if loop to get valid priority                print("Priority must be 1, 2 or 3")            else:                boolean_priority = False        except ValueError:            print("Invalid input; please enter a valid number")    required_item = {"Title": product_title, "Author": product_author, "Price": product_price}    print("{}, ${:.2f} (priority {}) added to reading list".format(product_title, product_author, product_price))    list_required.append(required_book)     # add into required list    return list_required        # return to original listdef mark_book(list_required):    boolean_marked = True  # boolean for error checking    if len(list_required) == 0:        print("No required books")    else:        mlist= view_required_books(list_required)    # show list_required, user will choose which book is marked as completed        while boolean_marked:            try:                slect_item = int(input("Enter the number of an book to mark as read\n>>>"))                if slect_book < 0 or slect_book > len(list_required) - 1:    # use if loop, length must -1, because the index start from 0                    print("Invalid item number", end="\n\n")                else:                    marked_item = mlist[slect_book]    # get item first, put into marked list                    print("{} marked as read".format(marked_book["Title"]))                    boolean_marked = False            except ValueError:                print("Invalid input; please enter a valid number", end="\n\n")    return marked_bookmain()